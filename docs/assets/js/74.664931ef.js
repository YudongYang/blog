(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{357:function(t,s,a){"use strict";a.r(s);var e=a(42),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_6-0-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-0-2"}},[t._v("#")]),t._v(" 6.0.2")]),t._v(" "),a("ul",[a("li",[t._v("Fixed an issue with parsing and stringifying an empty attribute value")])]),t._v(" "),a("h1",{attrs:{id:"_6-0-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-0-1"}},[t._v("#")]),t._v(" 6.0.1")]),t._v(" "),a("ul",[a("li",[t._v("Fixed an issue with unicode surrogate pair parsing")])]),t._v(" "),a("h1",{attrs:{id:"_6-0-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-0-0"}},[t._v("#")]),t._v(" 6.0.0")]),t._v(" "),a("ul",[a("li",[t._v("Updated: "),a("code",[t._v("cssesc")]),t._v(" to 3.0.0 (major)")]),t._v(" "),a("li",[t._v("Fixed: Issues with escaped "),a("code",[t._v("id")]),t._v(" and "),a("code",[t._v("class")]),t._v(" selectors")])]),t._v(" "),a("h1",{attrs:{id:"_5-0-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-0"}},[t._v("#")]),t._v(" 5.0.0")]),t._v(" "),a("ul",[a("li",[t._v("Allow escaped dot within class name.")]),t._v(" "),a("li",[t._v("Update PostCSS to 7.0.7 (patch)")])]),t._v(" "),a("h1",{attrs:{id:"_5-0-0-rc-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-0-rc-4"}},[t._v("#")]),t._v(" 5.0.0-rc.4")]),t._v(" "),a("ul",[a("li",[t._v("Fixed an issue where comments immediately after an insensitive (in attribute)\nwere not parsed correctly.")]),t._v(" "),a("li",[t._v("Updated "),a("code",[t._v("cssesc")]),t._v(" to 2.0.0 (major).")]),t._v(" "),a("li",[t._v("Removed outdated integration tests.")]),t._v(" "),a("li",[t._v("Added tests for custom selectors, tags with attributes, the universal\nselector with pseudos, and tokens after combinators.")])]),t._v(" "),a("h1",{attrs:{id:"_5-0-0-rc-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-0-rc-1"}},[t._v("#")]),t._v(" 5.0.0-rc.1")]),t._v(" "),a("p",[t._v("To ease adoption of the v5.0 release, we have relaxed the node version\ncheck performed by npm at installation time to allow for node 4, which\nremains officially unsupported, but likely to continue working for the\ntime being.")]),t._v(" "),a("h1",{attrs:{id:"_5-0-0-rc-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-0-rc-0"}},[t._v("#")]),t._v(" 5.0.0-rc.0")]),t._v(" "),a("p",[t._v("This release has "),a("strong",[t._v("BREAKING CHANGES")]),t._v(" that were required to fix regressions\nin 4.0.0 and to make the Combinator Node API consistent for all combinator\ntypes. Please read carefully.")]),t._v(" "),a("h2",{attrs:{id:"summary-of-changes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#summary-of-changes"}},[t._v("#")]),t._v(" Summary of Changes")]),t._v(" "),a("ul",[a("li",[t._v("The way a descendent combinator that isn't a single space character (E.g. "),a("code",[t._v(".a .b")]),t._v(") is stored in the AST has changed.")]),t._v(" "),a("li",[t._v("Named Combinators (E.g. "),a("code",[t._v(".a /for/ .b")]),t._v(") are now properly parsed as a combinator.")]),t._v(" "),a("li",[t._v("It is now possible to look up a node based on the source location of a character in that node and to query nodes if they contain some character.")]),t._v(" "),a("li",[t._v("Several bug fixes that caused the parser to hang and run out of memory when a "),a("code",[t._v("/")]),t._v(" was encountered have been fixed.")]),t._v(" "),a("li",[t._v("The minimum supported version of Node is now "),a("code",[t._v("v6.0.0")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"changes-to-the-descendent-combinator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-the-descendent-combinator"}},[t._v("#")]),t._v(" Changes to the Descendent Combinator")]),t._v(" "),a("p",[t._v("In prior releases, the value of a descendant combinator with multiple spaces included all the spaces.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v(".a .b")]),t._v(": Extra spaces are now stored as space before.\n"),a("ul",[a("li",[t._v("Old & Busted:\n"),a("ul",[a("li",[a("code",[t._v('combinator.value === " "')])])])]),t._v(" "),a("li",[t._v("New hotness:\n"),a("ul",[a("li",[a("code",[t._v('combinator.value === " " && combinator.spaces.before === " "')])])])])])]),t._v(" "),a("li",[a("code",[t._v(".a /*comment*/.b")]),t._v(": A comment at the end of the combinator causes extra space to become after space.\n"),a("ul",[a("li",[t._v("Old & Busted:\n"),a("ul",[a("li",[a("code",[t._v('combinator.value === " "')])]),t._v(" "),a("li",[a("code",[t._v('combinator.raws.value === " /*comment/"')])])])]),t._v(" "),a("li",[t._v("New hotness:\n"),a("ul",[a("li",[a("code",[t._v('combinator.value === " "')])]),t._v(" "),a("li",[a("code",[t._v('combinator.spaces.after === " "')])]),t._v(" "),a("li",[a("code",[t._v('combinator.raws.spaces.after === " /*comment*/"')])])])])])]),t._v(" "),a("li",[a("code",[t._v(".a<newline>.b")]),t._v(": whitespace that doesn't start or end with a single space character is stored as a raw value.\n"),a("ul",[a("li",[t._v("Old & Busted:\n"),a("ul",[a("li",[a("code",[t._v('combinator.value === "\\n"')])]),t._v(" "),a("li",[a("code",[t._v("combinator.raws.value === undefined")])])])]),t._v(" "),a("li",[t._v("New hotness:\n"),a("ul",[a("li",[a("code",[t._v('combinator.value === " "')])]),t._v(" "),a("li",[a("code",[t._v('combinator.raws.value === "\\n"')])])])])])])]),t._v(" "),a("h3",{attrs:{id:"support-for-named-combinators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#support-for-named-combinators"}},[t._v("#")]),t._v(' Support for "Named Combinators"')]),t._v(" "),a("p",[t._v("Although, nonstandard and unlikely to ever become a standard, combinators like "),a("code",[t._v("/deep/")]),t._v(" and "),a("code",[t._v("/for/")]),t._v(" are now properly supported.")]),t._v(" "),a("p",[t._v("Because they've been taken off the standardization track, there is no spec-official name for combinators of the form "),a("code",[t._v("/<ident>/")]),t._v(". However, I talked to "),a("a",{attrs:{href:"https://twitter.com/tabatkins",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tab Atkins"),a("OutboundLink")],1),t._v(' and we agreed to call them "named combinators" so now they are called that.')]),t._v(" "),a("p",[t._v("Before this release such named combinators were parsed without intention and generated three nodes of type "),a("code",[t._v('"tag"')]),t._v(" where the first and last nodes had a value of "),a("code",[t._v('"/"')]),t._v(".")]),t._v(" "),a("ul",[a("li",[a("code",[t._v(".a /for/ .b")]),t._v(" is parsed as a combinator.\n"),a("ul",[a("li",[t._v("Old & Busted:\n"),a("ul",[a("li",[a("code",[t._v('root.nodes[0].nodes[1].type === "tag"')])]),t._v(" "),a("li",[a("code",[t._v('root.nodes[0].nodes[1].value === "/"')])])])]),t._v(" "),a("li",[t._v("New hotness:\n"),a("ul",[a("li",[a("code",[t._v('root.nodes[0].nodes[1].type === "combinator"')])]),t._v(" "),a("li",[a("code",[t._v('root.nodes[0].nodes[1].value === "/for/"')])])])])])]),t._v(" "),a("li",[a("code",[t._v(".a /F\\6fR/ .b")]),t._v(" escapes are handled and uppercase is normalized.\n"),a("ul",[a("li",[t._v("Old & Busted:\n"),a("ul",[a("li",[a("code",[t._v('root.nodes[0].nodes[2].type === "tag"')])]),t._v(" "),a("li",[a("code",[t._v('root.nodes[0].nodes[2].value === "F\\\\6fR"')])])])]),t._v(" "),a("li",[t._v("New hotness:\n"),a("ul",[a("li",[a("code",[t._v('root.nodes[0].nodes[1].type === "combinator"')])]),t._v(" "),a("li",[a("code",[t._v('root.nodes[0].nodes[1].value === "/for/"')])]),t._v(" "),a("li",[a("code",[t._v('root.nodes[0].nodes[1].raws.value === "/F\\\\6fR/"')])])])])])])]),t._v(" "),a("h3",{attrs:{id:"source-position-checks-and-lookups"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#source-position-checks-and-lookups"}},[t._v("#")]),t._v(" Source position checks and lookups")]),t._v(" "),a("p",[t._v("A new API was added to look up a node based on the source location.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" selectorParser "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"postcss-selector-parser"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// You can find the most specific node for any given character")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" combinator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" selectorParser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("astSync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('".a > .b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("atPosition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncombinator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" > "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// You can check if a node includes a specific character")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Whitespace surrounding the node that is owned by that node")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// is included in the check.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("column")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" combinator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAtPosition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" column"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => [false, true, true, true, false]")]),t._v("\n")])])]),a("h1",{attrs:{id:"_4-0-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-0-0"}},[t._v("#")]),t._v(" 4.0.0")]),t._v(" "),a("p",[t._v("This release has "),a("strong",[t._v("BREAKING CHANGES")]),t._v(" that were required to fix bugs regarding values with escape sequences. Please read carefully.")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("Identifiers with escapes")]),t._v(" - CSS escape sequences are now hidden from the public API by default.\nThe normal value of a node like a class name or ID, or an aspect of a node such as attribute\nselector's value, is unescaped. Escapes representing Non-ascii characters are unescaped into\nunicode characters. For example: "),a("code",[t._v('bu\\tton, .\\31 00, #i\\2764\\FE0Fu, [attr="value is \\"quoted\\""]')]),t._v("\nwill parse respectively to the values "),a("code",[t._v("button")]),t._v(", "),a("code",[t._v("100")]),t._v(", "),a("code",[t._v("i❤️u")]),t._v(", "),a("code",[t._v('value is "quoted"')]),t._v(".\nThe original escape sequences for these values can be found in the corresponding property name\nin "),a("code",[t._v("node.raws")]),t._v(". Where possible, deprecation warnings were added, but the nature\nof escape handling makes it impossible to detect what is escaped or not. Our expectation is\nthat most users are neither expecting nor handling escape sequences in their use of this library,\nand so for them, this is a bug fix. Users who are taking care to handle escapes correctly can\nnow update their code to remove the escape handling and let us do it for them.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Mutating values with escapes")]),t._v(" - When you make an update to a node property that has escape handling\nThe value is assumed to be unescaped, and any special characters are escaped automatically and\nthe corresponding "),a("code",[t._v("raws")]),t._v(" value is immediately updated. This can result in changes to the original\nescape format. Where the exact value of the escape sequence is important there are methods that\nallow both values to be set in conjunction. There are a number of new convenience methods for\nmanipulating values that involve escapes, especially for attributes values where the quote mark\nis involved. See https://github.com/postcss/postcss-selector-parser/pull/133 for an extensive\nwrite-up on these changes.")])])]),t._v(" "),a("p",[a("strong",[t._v("Upgrade/API Example")])]),t._v(" "),a("p",[t._v("In "),a("code",[t._v("3.x")]),t._v(" there was no unescape handling and internal consistency of several properties was the caller's job to maintain. It was very easy for the developer\nto create a CSS file that did not parse correctly when some types of values\nwere in use.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" selectorParser "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"postcss-selector-parser"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" attr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" selectorParser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("attribute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("attribute"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" operator"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"="')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a-value"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "a-value"')]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => [id=a-value]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Add quotes to an attribute's value.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// All these values have to be set by the caller to be consistent:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// no internal consistency is maintained.")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("raws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unquoted "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" attr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\'"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" attr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\'"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => \"'a-value'\"")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("quoted "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => \"[id='a-value']\"")]),t._v("\n")])])]),a("p",[t._v("In "),a("code",[t._v("4.0")]),t._v(" there is a convenient API for setting and mutating values\nthat may need escaping. Especially for attributes.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" selectorParser "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"postcss-selector-parser"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The constructor requires you specify the exact escape sequence")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" className "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" selectorParser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("className")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"illegal class name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" raws"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"illegal\\\\ class\\\\ name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nclassName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '.illegal\\\\ class\\\\ name'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// So it's better to set the value as a property")]),t._v("\nclassName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" selectorParser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("className")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Most properties that deal with identifiers work like this")]),t._v("\nclassName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"escape for me"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nclassName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 'escape for me'")]),t._v("\nclassName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '.escape\\\\ for\\\\ me'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// emoji and all non-ascii are escaped to ensure it works in every css file.")]),t._v("\nclassName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"😱🦄😍"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nclassName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '😱🦄😍'")]),t._v("\nclassName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '.\\\\1F631\\\\1F984\\\\1F60D'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// you can control the escape sequence if you want, or do bad bad things")]),t._v("\nclassName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPropertyAndEscape")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxxx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yyyy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nclassName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "xxxx"')]),t._v("\nclassName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => ".yyyy"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Pass a value directly through to the css output without escaping it. ")]),t._v("\nclassName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPropertyWithoutEscape")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$REPLACE_ME$'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nclassName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "$REPLACE_ME$"')]),t._v("\nclassName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => ".$REPLACE_ME$"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The biggest changes are to the Attribute class")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// passing quoteMark explicitly is required to avoid a deprecation warning.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" attr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" selectorParser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("attribute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("attribute"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" operator"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"="')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a-value"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" quoteMark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "[id=a-value]"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Get the value with quotes on it and any necessary escapes.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is the same as reading attr.value in 3.x.")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getQuotedValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "a-value";')]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("quoteMark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => null")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Add quotes to an attribute's value.")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("quoteMark "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\'"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is all that's required.")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => \"[id='a-value']\"")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("quoted"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The value is still the same, only the quotes have changed.")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => a-value")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getQuotedValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => \"'a-value'\";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// deprecated assignment, no warning because there's no escapes")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"new-value"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// no quote mark is needed so it is removed")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getQuotedValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "new-value";')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// deprecated assignment, ")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"a \'single quoted\' value\\""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// > (node:27859) DeprecationWarning: Assigning an attribute a value containing characters that might need to be escaped is deprecated. Call attribute.setValue() instead.")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getQuotedValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '\"a \\'single quoted\\' value\"';")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// quote mark inferred from first and last characters.")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("quoteMark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '\"'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// setValue takes options to make manipulating the value simple.")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("smart"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// foo doesn't require any escapes or quotes.")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '[id=foo]'")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("quoteMark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => null ")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// An explicit quote mark can be specified")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("quoteMark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '[id=\"foo\"]'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// preserves quote mark by default")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '[id=\"bar\"]'")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("quoteMark "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '[id=bar]'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// with no arguments, it preserves quote mark even when it's not a great idea")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a value \\n that should be quoted'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '[id=a\\\\ value\\\\ \\\\A\\\\ that\\\\ should\\\\ be\\\\ quoted]'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// smart preservation with a specified default")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a value \\n that should be quoted'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("smart"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" preferCurrentQuoteMark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" quoteMark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\'"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => \"[id='a value \\\\A  that should be quoted']\"")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("quoteMark "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '[id=\"a value \\\\A  that should be quoted\"]'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this keeps double quotes because it wants to quote the value and the existing value has double quotes.")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'this should be quoted'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("smart"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" preferCurrentQuoteMark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" quoteMark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\'"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '[id=\"this should be quoted\"]'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// picks single quotes because the value has double quotes")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a \"double quoted\" value'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("smart"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" preferCurrentQuoteMark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" quoteMark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\'"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "[id=\'a "double quoted" value\']"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// setPropertyAndEscape lets you do anything you want. Even things that are a bad idea and illegal.")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPropertyAndEscape")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxxx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'the password is 42'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "xxxx"')]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "[id=the password is 42]"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Pass a value directly through to the css output without escaping it. ")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPropertyWithoutEscape")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$REPLACEMENT$'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "$REPLACEMENT$"')]),t._v("\nattr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "[id=$REPLACEMENT$]"')]),t._v("\n")])])]),a("h1",{attrs:{id:"_3-1-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2"}},[t._v("#")]),t._v(" 3.1.2")]),t._v(" "),a("ul",[a("li",[t._v("Fix: Removed dot-prop dependency since it's no longer written in es5.")])]),t._v(" "),a("h1",{attrs:{id:"_3-1-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1"}},[t._v("#")]),t._v(" 3.1.1")]),t._v(" "),a("ul",[a("li",[t._v("Fix: typescript definitions weren't in the published package.")])]),t._v(" "),a("h1",{attrs:{id:"_3-1-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-0"}},[t._v("#")]),t._v(" 3.1.0")]),t._v(" "),a("ul",[a("li",[t._v("Fixed numerous bugs in attribute nodes relating to the handling of comments\nand whitespace. There's significant changes to "),a("code",[t._v("attrNode.spaces")]),t._v(" and "),a("code",[t._v("attrNode.raws")]),t._v(" since the "),a("code",[t._v("3.0.0")]),t._v(" release.")]),t._v(" "),a("li",[t._v("Added "),a("code",[t._v("Attribute#offsetOf(part)")]),t._v(" to get the offset location of\nattribute parts like "),a("code",[t._v('"operator"')]),t._v(" and "),a("code",[t._v('"value"')]),t._v(". This is most\noften added to "),a("code",[t._v("Attribute#sourceIndex")]),t._v(" for error reporting.")])]),t._v(" "),a("h1",{attrs:{id:"_3-0-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-0"}},[t._v("#")]),t._v(" 3.0.0")]),t._v(" "),a("h2",{attrs:{id:"breaking-changes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#breaking-changes"}},[t._v("#")]),t._v(" Breaking changes")]),t._v(" "),a("ul",[a("li",[t._v("Some tweaks to the tokenizer/attribute selector parsing mean that whitespace\nlocations might be slightly different to the 2.x code.")]),t._v(" "),a("li",[t._v("Better attribute selector parsing with more validation; postcss-selector-parser\nno longer uses regular expressions to parse attribute selectors.")]),t._v(" "),a("li",[t._v("Added an async API (thanks to @jacobp100); the default "),a("code",[t._v("process")]),t._v(" API is now\nasync, and the sync API is now accessed through "),a("code",[t._v("processSync")]),t._v(" instead.")]),t._v(" "),a("li",[a("code",[t._v("process()")]),t._v(" and "),a("code",[t._v("processSync()")]),t._v(" now return a string instead of the Processor\ninstance.")]),t._v(" "),a("li",[t._v("Tweaks handling of Less interpolation (thanks to @jwilsson).")]),t._v(" "),a("li",[t._v("Removes support for Node 0.12.")])]),t._v(" "),a("h2",{attrs:{id:"other-changes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#other-changes"}},[t._v("#")]),t._v(" Other changes")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ast()")]),t._v(" and "),a("code",[t._v("astSync()")]),t._v(" methods have been added to the "),a("code",[t._v("Processor")]),t._v(". These\nreturn the "),a("code",[t._v("Root")]),t._v(" node of the selectors after processing them.")]),t._v(" "),a("li",[a("code",[t._v("transform()")]),t._v(" and "),a("code",[t._v("transformSync()")]),t._v(" methods have been added to the\n"),a("code",[t._v("Processor")]),t._v(". These return the value returned by the processor callback\nafter processing the selectors.")]),t._v(" "),a("li",[t._v("Set the parent when inserting a node (thanks to @chriseppstein).")]),t._v(" "),a("li",[t._v("Correctly adjust indices when using insertBefore/insertAfter (thanks to @tivac).")]),t._v(" "),a("li",[t._v("Fixes handling of namespaces with qualified tag selectors.")]),t._v(" "),a("li",[a("code",[t._v("process")]),t._v(", "),a("code",[t._v("ast")]),t._v(" and "),a("code",[t._v("transform")]),t._v(" (and their sync variants) now accept a\n"),a("code",[t._v("postcss")]),t._v(" rule node. When provided, better errors are generated and selector\nprocessing is automatically set back to the rule selector (unless the "),a("code",[t._v("updateSelector")]),t._v(" option is set to "),a("code",[t._v("false")]),t._v(".)")]),t._v(" "),a("li",[t._v("Now more memory efficient when tokenizing selectors.")])]),t._v(" "),a("h3",{attrs:{id:"upgrade-hints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#upgrade-hints"}},[t._v("#")]),t._v(" Upgrade hints")]),t._v(" "),a("p",[t._v("The pattern of:")]),t._v(" "),a("p",[a("code",[t._v("rule.selector = processor.process(rule.selector).result.toString();")])]),t._v(" "),a("p",[t._v("is now:")]),t._v(" "),a("p",[a("code",[t._v("processor.processSync(rule)")])]),t._v(" "),a("h1",{attrs:{id:"_2-2-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3"}},[t._v("#")]),t._v(" 2.2.3")]),t._v(" "),a("ul",[a("li",[t._v("Resolves an issue where the parser would not reduce multiple spaces between an\nampersand and another simple selector in lossy mode (thanks to @adam-26).")])]),t._v(" "),a("h1",{attrs:{id:"_2-2-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2"}},[t._v("#")]),t._v(" 2.2.2")]),t._v(" "),a("ul",[a("li",[t._v("No longer hangs on an unescaped semicolon; instead the parser will throw\nan exception for these cases.")])]),t._v(" "),a("h1",{attrs:{id:"_2-2-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1"}},[t._v("#")]),t._v(" 2.2.1")]),t._v(" "),a("ul",[a("li",[t._v("Allows a consumer to specify whitespace tokens when creating a new Node\n(thanks to @Semigradsky).")])]),t._v(" "),a("h1",{attrs:{id:"_2-2-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-0"}},[t._v("#")]),t._v(" 2.2.0")]),t._v(" "),a("ul",[a("li",[t._v("Added a new option to normalize whitespace when parsing the selector string\n(thanks to @adam-26).")])]),t._v(" "),a("h1",{attrs:{id:"_2-1-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1"}},[t._v("#")]),t._v(" 2.1.1")]),t._v(" "),a("ul",[a("li",[t._v("Better unquoted value handling within attribute selectors\n(thanks to @evilebottnawi).")])]),t._v(" "),a("h1",{attrs:{id:"_2-1-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-0"}},[t._v("#")]),t._v(" 2.1.0")]),t._v(" "),a("ul",[a("li",[t._v("Added: Use string constants for all node types & expose them on the main\nparser instance (thanks to @Aweary).")])]),t._v(" "),a("p",[t._v("# 2.0.0")]),t._v(" "),a("p",[t._v("This release contains the following breaking changes:")]),t._v(" "),a("ul",[a("li",[t._v("Renamed all "),a("code",[t._v("eachInside")]),t._v(" iterators to "),a("code",[t._v("walk")]),t._v(". For example, "),a("code",[t._v("eachTag")]),t._v(" is now\n"),a("code",[t._v("walkTags")]),t._v(", and "),a("code",[t._v("eachInside")]),t._v(" is now "),a("code",[t._v("walk")]),t._v(".")]),t._v(" "),a("li",[t._v("Renamed "),a("code",[t._v("Node#removeSelf()")]),t._v(" to "),a("code",[t._v("Node#remove()")]),t._v(".")]),t._v(" "),a("li",[t._v("Renamed "),a("code",[t._v("Container#remove()")]),t._v(" to "),a("code",[t._v("Container#removeChild()")]),t._v(".")]),t._v(" "),a("li",[t._v("Renamed "),a("code",[t._v("Node#raw")]),t._v(" to "),a("code",[t._v("Node#raws")]),t._v(" (thanks to @davidtheclark).")]),t._v(" "),a("li",[t._v("Now parses "),a("code",[t._v("&")]),t._v(" as the "),a("em",[t._v("nesting")]),t._v(" selector, rather than a "),a("em",[t._v("tag")]),t._v(" selector.")]),t._v(" "),a("li",[t._v("Fixes misinterpretation of Sass interpolation (e.g. "),a("code",[t._v("#{foo}")]),t._v(") as an\nid selector (thanks to @davidtheclark).")])]),t._v(" "),a("p",[t._v("and;")]),t._v(" "),a("ul",[a("li",[t._v("Fixes parsing of attribute selectors with equals signs in them\n(e.g. "),a("code",[t._v('[data-attr="foo=bar"]')]),t._v(") (thanks to @montmanu).")]),t._v(" "),a("li",[t._v("Adds "),a("code",[t._v("quoted")]),t._v(" and "),a("code",[t._v("raw.unquoted")]),t._v(" properties to attribute nodes\n(thanks to @davidtheclark).")])]),t._v(" "),a("h1",{attrs:{id:"_1-3-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3"}},[t._v("#")]),t._v(" 1.3.3")]),t._v(" "),a("ul",[a("li",[t._v("Fixes an infinite loop on "),a("code",[t._v(")")]),t._v(" and "),a("code",[t._v("]")]),t._v(" tokens when they had no opening pairs.\nNow postcss-selector-parser will throw when it encounters these lone tokens.")])]),t._v(" "),a("p",[t._v("# 1.3.2")]),t._v(" "),a("ul",[a("li",[t._v("Now uses plain integers rather than "),a("code",[t._v("str.charCodeAt(0)")]),t._v(" for compiled builds.")])]),t._v(" "),a("h1",{attrs:{id:"_1-3-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1"}},[t._v("#")]),t._v(" 1.3.1")]),t._v(" "),a("ul",[a("li",[t._v("Update flatten to v1.x (thanks to @shinnn).")])]),t._v(" "),a("h1",{attrs:{id:"_1-3-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-0"}},[t._v("#")]),t._v(" 1.3.0")]),t._v(" "),a("ul",[a("li",[t._v("Adds a new node type, "),a("code",[t._v("String")]),t._v(", to fix a crash on selectors such as\n"),a("code",[t._v('foo:bar("test")')]),t._v(".")])]),t._v(" "),a("h1",{attrs:{id:"_1-2-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1"}},[t._v("#")]),t._v(" 1.2.1")]),t._v(" "),a("ul",[a("li",[t._v("Fixes a crash when the parser encountered a trailing combinator.")])]),t._v(" "),a("h1",{attrs:{id:"_1-2-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-0"}},[t._v("#")]),t._v(" 1.2.0")]),t._v(" "),a("ul",[a("li",[t._v("A more descriptive error is thrown when the parser expects to find a\npseudo-class/pseudo-element (thanks to @ashelley).")]),t._v(" "),a("li",[t._v("Adds support for line/column locations for selector nodes, as well as a\n"),a("code",[t._v("Node#sourceIndex")]),t._v(" method (thanks to @davidtheclark).")])]),t._v(" "),a("h1",{attrs:{id:"_1-1-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-4"}},[t._v("#")]),t._v(" 1.1.4")]),t._v(" "),a("ul",[a("li",[t._v("Fixes a crash when a selector started with a "),a("code",[t._v(">")]),t._v(" combinator. The module will\nnow no longer throw if a selector has a leading/trailing combinator node.")])]),t._v(" "),a("h1",{attrs:{id:"_1-1-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-3"}},[t._v("#")]),t._v(" 1.1.3")]),t._v(" "),a("ul",[a("li",[t._v("Fixes a crash on "),a("code",[t._v("@")]),t._v(" tokens.")])]),t._v(" "),a("h1",{attrs:{id:"_1-1-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2"}},[t._v("#")]),t._v(" 1.1.2")]),t._v(" "),a("ul",[a("li",[t._v("Fixes an infinite loop caused by using parentheses in a non-pseudo element\ncontext.")])]),t._v(" "),a("h1",{attrs:{id:"_1-1-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1"}},[t._v("#")]),t._v(" 1.1.1")]),t._v(" "),a("ul",[a("li",[t._v("Fixes a crash when a backslash ended a selector string.")])]),t._v(" "),a("h1",{attrs:{id:"_1-1-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-0"}},[t._v("#")]),t._v(" 1.1.0")]),t._v(" "),a("ul",[a("li",[t._v("Adds support for replacing multiple nodes at once with "),a("code",[t._v("replaceWith")]),t._v("\n(thanks to @jonathantneal).")]),t._v(" "),a("li",[t._v("Parser no longer throws on sequential IDs and trailing commas, to support\nparsing of selector hacks.")])]),t._v(" "),a("h1",{attrs:{id:"_1-0-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-0-1"}},[t._v("#")]),t._v(" 1.0.1")]),t._v(" "),a("ul",[a("li",[t._v("Fixes using "),a("code",[t._v("insertAfter")]),t._v(" and "),a("code",[t._v("insertBefore")]),t._v(" during iteration.")])]),t._v(" "),a("h1",{attrs:{id:"_1-0-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-0-0"}},[t._v("#")]),t._v(" 1.0.0")]),t._v(" "),a("ul",[a("li",[t._v("Adds "),a("code",[t._v("clone")]),t._v(" and "),a("code",[t._v("replaceWith")]),t._v(" methods to nodes.")]),t._v(" "),a("li",[t._v("Adds "),a("code",[t._v("insertBefore")]),t._v(" and "),a("code",[t._v("insertAfter")]),t._v(" to containers.")]),t._v(" "),a("li",[t._v("Stabilises API.")])]),t._v(" "),a("h1",{attrs:{id:"_0-0-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-0-5"}},[t._v("#")]),t._v(" 0.0.5")]),t._v(" "),a("ul",[a("li",[t._v("Fixes crash on extra whitespace inside a pseudo selector's parentheses.")]),t._v(" "),a("li",[t._v("Adds sort function to the container class.")]),t._v(" "),a("li",[t._v("Enables the parser to pass its input through without transforming.")]),t._v(" "),a("li",[t._v("Iteration-safe "),a("code",[t._v("each")]),t._v(" and "),a("code",[t._v("eachInside")]),t._v(".")])]),t._v(" "),a("h1",{attrs:{id:"_0-0-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-0-4"}},[t._v("#")]),t._v(" 0.0.4")]),t._v(" "),a("ul",[a("li",[t._v("Tidy up redundant duplication.")]),t._v(" "),a("li",[t._v("Fixes a bug where the parser would loop infinitely on universal selectors\ninside pseudo selectors.")]),t._v(" "),a("li",[t._v("Adds "),a("code",[t._v("length")]),t._v(" getter and "),a("code",[t._v("eachInside")]),t._v(", "),a("code",[t._v("map")]),t._v(", "),a("code",[t._v("reduce")]),t._v(" to the container class.")]),t._v(" "),a("li",[t._v("When a selector has been removed from the tree, the root node will no longer\ncast it to a string.")]),t._v(" "),a("li",[t._v("Adds node type iterators to the container class (e.g. "),a("code",[t._v("eachComment")]),t._v(").")]),t._v(" "),a("li",[t._v("Adds filter function to the container class.")]),t._v(" "),a("li",[t._v("Adds split function to the container class.")]),t._v(" "),a("li",[t._v("Create new node types by doing "),a("code",[t._v("parser.id(opts)")]),t._v(" etc.")]),t._v(" "),a("li",[t._v("Adds support for pseudo classes anywhere in the selector.")])]),t._v(" "),a("h1",{attrs:{id:"_0-0-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-0-3"}},[t._v("#")]),t._v(" 0.0.3")]),t._v(" "),a("ul",[a("li",[t._v("Adds "),a("code",[t._v("next")]),t._v(" and "),a("code",[t._v("prev")]),t._v(" to the node class.")]),t._v(" "),a("li",[t._v("Adds "),a("code",[t._v("first")]),t._v(" and "),a("code",[t._v("last")]),t._v(" getters to the container class.")]),t._v(" "),a("li",[t._v("Adds "),a("code",[t._v("every")]),t._v(" and "),a("code",[t._v("some")]),t._v(" iterators to the container class.")]),t._v(" "),a("li",[t._v("Add "),a("code",[t._v("empty")]),t._v(" alias for "),a("code",[t._v("removeAll")]),t._v(".")]),t._v(" "),a("li",[t._v("Combinators are now types of node.")]),t._v(" "),a("li",[t._v("Fixes the at method so that it is not an alias for "),a("code",[t._v("index")]),t._v(".")]),t._v(" "),a("li",[t._v("Tidy up creation of new nodes in the parser.")]),t._v(" "),a("li",[t._v("Refactors how namespaces are handled for consistency & less redundant code.")]),t._v(" "),a("li",[t._v("Refactors AST to use "),a("code",[t._v("nodes")]),t._v(" exclusively, and eliminates excessive nesting.")]),t._v(" "),a("li",[t._v("Fixes nested pseudo parsing.")]),t._v(" "),a("li",[t._v("Fixes whitespace parsing.")])]),t._v(" "),a("h1",{attrs:{id:"_0-0-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-0-2"}},[t._v("#")]),t._v(" 0.0.2")]),t._v(" "),a("ul",[a("li",[t._v("Adds support for namespace selectors.")]),t._v(" "),a("li",[t._v("Adds support for selectors joined by escaped spaces - such as "),a("code",[t._v(".\\31\\ 0")]),t._v(".")])]),t._v(" "),a("h1",{attrs:{id:"_0-0-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-0-1"}},[t._v("#")]),t._v(" 0.0.1")]),t._v(" "),a("ul",[a("li",[t._v("Initial release.")])])])}),[],!1,null,null,null);s.default=n.exports}}]);